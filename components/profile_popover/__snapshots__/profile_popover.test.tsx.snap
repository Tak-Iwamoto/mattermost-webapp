// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/ProfilePopover should hide add-to-channel option if not on team 1`] = `
<Popover
  actions={
    Object {
      "closeModal": [MockFunction],
      "getMembershipForCurrentEntities": [MockFunction] {
        "calls": Array [
          Array [
            "user_id",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "loadBot": [MockFunction],
      "openDirectChannelToUserId": [MockFunction],
      "openModal": [MockFunction],
    }
  }
  canManageAnyChannelMembersInCurrentTeam={true}
  currentTeamId="team_id"
  currentUserId=""
  enableTimezone={true}
  hasMention={false}
  hide={[MockFunction]}
  id="user-profile-popover"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "onError": [Function],
      "textComponent": "span",
      "timeZone": "Etc/UTC",
    }
  }
  isChannelAdmin={false}
  isInCurrentTeam={false}
  isRHS={false}
  isTeamAdmin={false}
  placement="right"
  popoverSize="sm"
  popoverStyle="info"
  src="src"
  status="offline"
  teamUrl=""
  title={
    <span
      data-testid="profilePopoverTitle_some-user"
    >
      <span
        className="user-popover__username"
      />
    </span>
  }
  user={
    Object {
      "allow_marketing": false,
      "auth_data": "",
      "auth_service": "",
      "bot_description": "",
      "bot_last_icon_update": 0,
      "create_at": 0,
      "delete_at": 0,
      "email": "",
      "email_verified": true,
      "failed_attempts": 0,
      "first_name": "",
      "id": "user_id",
      "is_bot": false,
      "last_activity_at": 0,
      "last_name": "",
      "last_password_update": 0,
      "last_picture_update": 0,
      "locale": "",
      "mfa_active": false,
      "mfa_secret": "",
      "nickname": "",
      "notify_props": Object {
        "channel": "false",
        "comments": "never",
        "desktop": "default",
        "desktop_sound": "false",
        "email": "false",
        "first_name": "false",
        "mark_unread": "mention",
        "mention_keys": "",
        "push": "none",
        "push_status": "offline",
      },
      "password": "",
      "position": "",
      "props": Object {},
      "roles": "",
      "terms_of_service_create_at": 0,
      "terms_of_service_id": "",
      "update_at": 0,
      "username": "some-user",
    }
  }
>
  <Avatar
    key="user-popover-image"
    size="xxl"
    url="src"
    username="some-user"
  />
  <Connect(Pluggable)
    hide={[MockFunction]}
    key="profilePopoverPluggable2"
    pluggableName="PopoverUserAttributes"
    status="offline"
    user={
      Object {
        "allow_marketing": false,
        "auth_data": "",
        "auth_service": "",
        "bot_description": "",
        "bot_last_icon_update": 0,
        "create_at": 0,
        "delete_at": 0,
        "email": "",
        "email_verified": true,
        "failed_attempts": 0,
        "first_name": "",
        "id": "user_id",
        "is_bot": false,
        "last_activity_at": 0,
        "last_name": "",
        "last_password_update": 0,
        "last_picture_update": 0,
        "locale": "",
        "mfa_active": false,
        "mfa_secret": "",
        "nickname": "",
        "notify_props": Object {
          "channel": "false",
          "comments": "never",
          "desktop": "default",
          "desktop_sound": "false",
          "email": "false",
          "first_name": "false",
          "mark_unread": "mention",
          "mention_keys": "",
          "push": "none",
          "push_status": "offline",
        },
        "password": "",
        "position": "",
        "props": Object {},
        "roles": "",
        "terms_of_service_create_at": 0,
        "terms_of_service_id": "",
        "update_at": 0,
        "username": "some-user",
      }
    }
  />
  <div
    className="popover__row first"
    data-toggle="tooltip"
    key="user-popover-dm"
  >
    <a
      className="text-nowrap user-popover__email"
      href="#"
      onClick={[Function]}
    >
      <LocalizedIcon
        className="fa fa-paper-plane"
        title={
          Object {
            "defaultMessage": "Send Message Icon",
            "id": "user_profile.send.dm.icon",
          }
        }
      />
      <FormattedMessage
        defaultMessage="Send Message"
        id="user_profile.send.dm"
      />
    </a>
  </div>
  <Connect(Pluggable)
    hide={[MockFunction]}
    key="profilePopoverPluggable3"
    pluggableName="PopoverUserActions"
    status="offline"
    user={
      Object {
        "allow_marketing": false,
        "auth_data": "",
        "auth_service": "",
        "bot_description": "",
        "bot_last_icon_update": 0,
        "create_at": 0,
        "delete_at": 0,
        "email": "",
        "email_verified": true,
        "failed_attempts": 0,
        "first_name": "",
        "id": "user_id",
        "is_bot": false,
        "last_activity_at": 0,
        "last_name": "",
        "last_password_update": 0,
        "last_picture_update": 0,
        "locale": "",
        "mfa_active": false,
        "mfa_secret": "",
        "nickname": "",
        "notify_props": Object {
          "channel": "false",
          "comments": "never",
          "desktop": "default",
          "desktop_sound": "false",
          "email": "false",
          "first_name": "false",
          "mark_unread": "mention",
          "mention_keys": "",
          "push": "none",
          "push_status": "offline",
        },
        "password": "",
        "position": "",
        "props": Object {},
        "roles": "",
        "terms_of_service_create_at": 0,
        "terms_of_service_id": "",
        "update_at": 0,
        "username": "some-user",
      }
    }
  />
</Popover>
`;

exports[`components/ProfilePopover should match snapshot 1`] = `
<Popover
  actions={
    Object {
      "closeModal": [MockFunction],
      "getMembershipForCurrentEntities": [MockFunction] {
        "calls": Array [
          Array [
            "user_id",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "loadBot": [MockFunction],
      "openDirectChannelToUserId": [MockFunction],
      "openModal": [MockFunction],
    }
  }
  canManageAnyChannelMembersInCurrentTeam={true}
  currentTeamId="team_id"
  currentUserId=""
  enableTimezone={true}
  hasMention={false}
  hide={[MockFunction]}
  id="user-profile-popover"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatDateToParts": [Function],
      "formatDisplayName": [Function],
      "formatList": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatNumberToParts": [Function],
      "formatPlural": [Function],
      "formatRelativeTime": [Function],
      "formatTime": [Function],
      "formatTimeToParts": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getDisplayNames": [Function],
        "getListFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralRules": [Function],
        "getRelativeTimeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "onError": [Function],
      "textComponent": "span",
      "timeZone": "Etc/UTC",
    }
  }
  isChannelAdmin={false}
  isInCurrentTeam={true}
  isRHS={false}
  isTeamAdmin={false}
  placement="right"
  popoverSize="sm"
  popoverStyle="info"
  src="src"
  status="offline"
  teamUrl=""
  title={
    <span
      data-testid="profilePopoverTitle_some-user"
    >
      <span
        className="user-popover__username"
      />
    </span>
  }
  user={
    Object {
      "allow_marketing": false,
      "auth_data": "",
      "auth_service": "",
      "bot_description": "",
      "bot_last_icon_update": 0,
      "create_at": 0,
      "delete_at": 0,
      "email": "",
      "email_verified": true,
      "failed_attempts": 0,
      "first_name": "",
      "id": "user_id",
      "is_bot": false,
      "last_activity_at": 0,
      "last_name": "",
      "last_password_update": 0,
      "last_picture_update": 0,
      "locale": "",
      "mfa_active": false,
      "mfa_secret": "",
      "nickname": "",
      "notify_props": Object {
        "channel": "false",
        "comments": "never",
        "desktop": "default",
        "desktop_sound": "false",
        "email": "false",
        "first_name": "false",
        "mark_unread": "mention",
        "mention_keys": "",
        "push": "none",
        "push_status": "offline",
      },
      "password": "",
      "position": "",
      "props": Object {},
      "roles": "",
      "terms_of_service_create_at": 0,
      "terms_of_service_id": "",
      "update_at": 0,
      "username": "some-user",
    }
  }
>
  <Avatar
    key="user-popover-image"
    size="xxl"
    url="src"
    username="some-user"
  />
  <Connect(Pluggable)
    hide={[MockFunction]}
    key="profilePopoverPluggable2"
    pluggableName="PopoverUserAttributes"
    status="offline"
    user={
      Object {
        "allow_marketing": false,
        "auth_data": "",
        "auth_service": "",
        "bot_description": "",
        "bot_last_icon_update": 0,
        "create_at": 0,
        "delete_at": 0,
        "email": "",
        "email_verified": true,
        "failed_attempts": 0,
        "first_name": "",
        "id": "user_id",
        "is_bot": false,
        "last_activity_at": 0,
        "last_name": "",
        "last_password_update": 0,
        "last_picture_update": 0,
        "locale": "",
        "mfa_active": false,
        "mfa_secret": "",
        "nickname": "",
        "notify_props": Object {
          "channel": "false",
          "comments": "never",
          "desktop": "default",
          "desktop_sound": "false",
          "email": "false",
          "first_name": "false",
          "mark_unread": "mention",
          "mention_keys": "",
          "push": "none",
          "push_status": "offline",
        },
        "password": "",
        "position": "",
        "props": Object {},
        "roles": "",
        "terms_of_service_create_at": 0,
        "terms_of_service_id": "",
        "update_at": 0,
        "username": "some-user",
      }
    }
  />
  <div
    className="popover__row first"
    data-toggle="tooltip"
    key="user-popover-dm"
  >
    <a
      className="text-nowrap user-popover__email"
      href="#"
      onClick={[Function]}
    >
      <LocalizedIcon
        className="fa fa-paper-plane"
        title={
          Object {
            "defaultMessage": "Send Message Icon",
            "id": "user_profile.send.dm.icon",
          }
        }
      />
      <FormattedMessage
        defaultMessage="Send Message"
        id="user_profile.send.dm"
      />
    </a>
  </div>
  <div
    className="popover__row first"
    data-toggle="tooltip"
    key="user-popover-add-to-channel"
  >
    <a
      className="text-nowrap"
      href="#"
      onClick={[Function]}
    >
      <Connect(injectIntl(ModalToggleButtonRedux))
        accessibilityLabel="Add to a Channel"
        dialogProps={
          Object {
            "user": Object {
              "allow_marketing": false,
              "auth_data": "",
              "auth_service": "",
              "bot_description": "",
              "bot_last_icon_update": 0,
              "create_at": 0,
              "delete_at": 0,
              "email": "",
              "email_verified": true,
              "failed_attempts": 0,
              "first_name": "",
              "id": "user_id",
              "is_bot": false,
              "last_activity_at": 0,
              "last_name": "",
              "last_password_update": 0,
              "last_picture_update": 0,
              "locale": "",
              "mfa_active": false,
              "mfa_secret": "",
              "nickname": "",
              "notify_props": Object {
                "channel": "false",
                "comments": "never",
                "desktop": "default",
                "desktop_sound": "false",
                "email": "false",
                "first_name": "false",
                "mark_unread": "mention",
                "mention_keys": "",
                "push": "none",
                "push_status": "offline",
              },
              "password": "",
              "position": "",
              "props": Object {},
              "roles": "",
              "terms_of_service_create_at": 0,
              "terms_of_service_id": "",
              "update_at": 0,
              "username": "some-user",
            },
          }
        }
        dialogType={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "displayName": "Connect(AddUserToChannelModal)",
            "type": [Function],
          }
        }
        modalId="add_user_to_channel"
        onClick={[MockFunction]}
        role="menuitem"
      >
        <LocalizedIcon
          className="fa fa-user-plus"
          title={
            Object {
              "defaultMessage": "Add User to Channel Icon",
              "id": "user_profile.add_user_to_channel.icon",
            }
          }
        />
        Add to a Channel
      </Connect(injectIntl(ModalToggleButtonRedux))>
    </a>
  </div>
  <Connect(Pluggable)
    hide={[MockFunction]}
    key="profilePopoverPluggable3"
    pluggableName="PopoverUserActions"
    status="offline"
    user={
      Object {
        "allow_marketing": false,
        "auth_data": "",
        "auth_service": "",
        "bot_description": "",
        "bot_last_icon_update": 0,
        "create_at": 0,
        "delete_at": 0,
        "email": "",
        "email_verified": true,
        "failed_attempts": 0,
        "first_name": "",
        "id": "user_id",
        "is_bot": false,
        "last_activity_at": 0,
        "last_name": "",
        "last_password_update": 0,
        "last_picture_update": 0,
        "locale": "",
        "mfa_active": false,
        "mfa_secret": "",
        "nickname": "",
        "notify_props": Object {
          "channel": "false",
          "comments": "never",
          "desktop": "default",
          "desktop_sound": "false",
          "email": "false",
          "first_name": "false",
          "mark_unread": "mention",
          "mention_keys": "",
          "push": "none",
          "push_status": "offline",
        },
        "password": "",
        "position": "",
        "props": Object {},
        "roles": "",
        "terms_of_service_create_at": 0,
        "terms_of_service_id": "",
        "update_at": 0,
        "username": "some-user",
      }
    }
  />
</Popover>
`;
